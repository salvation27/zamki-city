!function(e,t,n){function r(n){var r=t.console;i[n]||(i[n]=!0,e.migrateWarnings.push(n),r&&r.warn&&!e.migrateMute&&(r.warn("JQMIGRATE: "+n),e.migrateTrace&&r.trace&&r.trace()))}function a(t,n,a,i){if(Object.defineProperty)try{return void Object.defineProperty(t,n,{configurable:!0,enumerable:!0,get:function(){return r(i),a},set:function(e){r(i),a=e}})}catch(o){}e._definePropertyBroken=!0,t[n]=a}var i={};e.migrateWarnings=[],!e.migrateMute&&t.console&&t.console.log&&t.console.log("JQMIGRATE: Logging is active"),e.migrateTrace===n&&(e.migrateTrace=!0),e.migrateReset=function(){i={},e.migrateWarnings.length=0},"BackCompat"===document.compatMode&&r("jQuery is not compatible with Quirks Mode");var o=e("<input/>",{size:1}).attr("size")&&e.attrFn,s=e.attr,u=e.attrHooks.value&&e.attrHooks.value.get||function(){return null},c=e.attrHooks.value&&e.attrHooks.value.set||function(){return n},d=/^(?:input|button)$/i,l=/^[238]$/,p=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,f=/^(?:checked|selected)$/i;a(e,"attrFn",o||{},"jQuery.attrFn is deprecated"),e.attr=function(t,a,i,u){var c=a.toLowerCase(),h=t&&t.nodeType;return u&&(s.length<4&&r("jQuery.fn.attr( props, pass ) is deprecated"),t&&!l.test(h)&&(o?a in o:e.isFunction(e.fn[a])))?e(t)[a](i):("type"===a&&i!==n&&d.test(t.nodeName)&&t.parentNode&&r("Can't change the 'type' of an input or button in IE 6/7/8"),!e.attrHooks[c]&&p.test(c)&&(e.attrHooks[c]={get:function(t,r){var a,i=e.prop(t,r);return i===!0||"boolean"!=typeof i&&(a=t.getAttributeNode(r))&&a.nodeValue!==!1?r.toLowerCase():n},set:function(t,n,r){var a;return n===!1?e.removeAttr(t,r):(a=e.propFix[r]||r,a in t&&(t[a]=!0),t.setAttribute(r,r.toLowerCase())),r}},f.test(c)&&r("jQuery.fn.attr('"+c+"') may use property instead of attribute")),s.call(e,t,a,i))},e.attrHooks.value={get:function(e,t){var n=(e.nodeName||"").toLowerCase();return"button"===n?u.apply(this,arguments):("input"!==n&&"option"!==n&&r("jQuery.fn.attr('value') no longer gets properties"),t in e?e.value:null)},set:function(e,t){var n=(e.nodeName||"").toLowerCase();return"button"===n?c.apply(this,arguments):("input"!==n&&"option"!==n&&r("jQuery.fn.attr('value', val) no longer sets properties"),void(e.value=t))}};var h,v,g=e.fn.init,m=e.parseJSON,y=/^([^<]*)(<[\w\W]+>)([^>]*)$/;e.fn.init=function(t,n,a){var i;return t&&"string"==typeof t&&!e.isPlainObject(n)&&(i=y.exec(e.trim(t)))&&i[0]&&("<"!==t.charAt(0)&&r("$(html) HTML strings must start with '<' character"),i[3]&&r("$(html) HTML text after last tag is ignored"),"#"===i[0].charAt(0)&&(r("HTML string cannot start with a '#' character"),e.error("JQMIGRATE: Invalid selector string (XSS)")),n&&n.context&&(n=n.context),e.parseHTML)?g.call(this,e.parseHTML(i[2],n,!0),n,a):g.apply(this,arguments)},e.fn.init.prototype=e.fn,e.parseJSON=function(e){return e||null===e?m.apply(this,arguments):(r("jQuery.parseJSON requires a valid JSON string"),null)},e.uaMatch=function(e){e=e.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(e)||/(webkit)[ \/]([\w.]+)/.exec(e)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(e)||/(msie) ([\w.]+)/.exec(e)||e.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(e)||[];return{browser:t[1]||"",version:t[2]||"0"}},e.browser||(h=e.uaMatch(navigator.userAgent),v={},h.browser&&(v[h.browser]=!0,v.version=h.version),v.chrome?v.webkit=!0:v.webkit&&(v.safari=!0),e.browser=v),a(e,"browser",e.browser,"jQuery.browser is deprecated"),e.sub=function(){function t(e,n){return new t.fn.init(e,n)}e.extend(!0,t,this),t.superclass=this,t.fn=t.prototype=this(),t.fn.constructor=t,t.sub=this.sub,t.fn.init=function(r,a){return a&&a instanceof e&&!(a instanceof t)&&(a=t(a)),e.fn.init.call(this,r,a,n)},t.fn.init.prototype=t.fn;var n=t(document);return r("jQuery.sub() is deprecated"),t},e.ajaxSetup({converters:{"text json":e.parseJSON}});var b=e.fn.data;e.fn.data=function(t){var a,i,o=this[0];return!o||"events"!==t||1!==arguments.length||(a=e.data(o,t),i=e._data(o,t),a!==n&&a!==i||i===n)?b.apply(this,arguments):(r("Use of jQuery.fn.data('events') is deprecated"),i)};var w=/\/(java|ecma)script/i,j=e.fn.andSelf||e.fn.addBack;e.fn.andSelf=function(){return r("jQuery.fn.andSelf() replaced by jQuery.fn.addBack()"),j.apply(this,arguments)},e.clean||(e.clean=function(t,n,a,i){n=n||document,n=!n.nodeType&&n[0]||n,n=n.ownerDocument||n,r("jQuery.clean() is deprecated");var o,s,u,c,d=[];if(e.merge(d,e.buildFragment(t,n).childNodes),a)for(u=function(e){if(!e.type||w.test(e.type))return i?i.push(e.parentNode?e.parentNode.removeChild(e):e):a.appendChild(e)},o=0;null!=(s=d[o]);o++)e.nodeName(s,"script")&&u(s)||(a.appendChild(s),"undefined"!=typeof s.getElementsByTagName&&(c=e.grep(e.merge([],s.getElementsByTagName("script")),u),d.splice.apply(d,[o+1,0].concat(c)),o+=c.length));return d});var x=e.event.add,Q=e.event.remove,k=e.event.trigger,N=e.fn.toggle,T=e.fn.live,S=e.fn.die,C="ajaxStart|ajaxStop|ajaxSend|ajaxComplete|ajaxError|ajaxSuccess",M=new RegExp("\\b(?:"+C+")\\b"),H=/(?:^|\s)hover(\.\S+|)\b/,A=function(t){return"string"!=typeof t||e.event.special.hover?t:(H.test(t)&&r("'hover' pseudo-event is deprecated, use 'mouseenter mouseleave'"),t&&t.replace(H,"mouseenter$1 mouseleave$1"))};e.event.props&&"attrChange"!==e.event.props[0]&&e.event.props.unshift("attrChange","attrName","relatedNode","srcElement"),e.event.dispatch&&a(e.event,"handle",e.event.dispatch,"jQuery.event.handle is undocumented and deprecated"),e.event.add=function(e,t,n,a,i){e!==document&&M.test(t)&&r("AJAX events should be attached to document: "+t),x.call(this,e,A(t||""),n,a,i)},e.event.remove=function(e,t,n,r,a){Q.call(this,e,A(t)||"",n,r,a)},e.fn.error=function(){var e=Array.prototype.slice.call(arguments,0);return r("jQuery.fn.error() is deprecated"),e.splice(0,0,"error"),arguments.length?this.bind.apply(this,e):(this.triggerHandler.apply(this,e),this)},e.fn.toggle=function(t,n){if(!e.isFunction(t)||!e.isFunction(n))return N.apply(this,arguments);r("jQuery.fn.toggle(handler, handler...) is deprecated");var a=arguments,i=t.guid||e.guid++,o=0,s=function(n){var r=(e._data(this,"lastToggle"+t.guid)||0)%o;return e._data(this,"lastToggle"+t.guid,r+1),n.preventDefault(),a[r].apply(this,arguments)||!1};for(s.guid=i;o<a.length;)a[o++].guid=i;return this.click(s)},e.fn.live=function(t,n,a){return r("jQuery.fn.live() is deprecated"),T?T.apply(this,arguments):(e(this.context).on(t,this.selector,n,a),this)},e.fn.die=function(t,n){return r("jQuery.fn.die() is deprecated"),S?S.apply(this,arguments):(e(this.context).off(t,this.selector||"**",n),this)},e.event.trigger=function(e,t,n,a){return n||M.test(e)||r("Global events are undocumented and deprecated"),k.call(this,e,t,n||document,a)},e.each(C.split("|"),function(t,n){e.event.special[n]={setup:function(){var t=this;return t!==document&&(e.event.add(document,n+"."+e.guid,function(){e.event.trigger(n,null,t,!0)}),e._data(this,n,e.guid++)),!1},teardown:function(){return this!==document&&e.event.remove(document,n+"."+e._data(this,n)),!1}}})}(jQuery,window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImpxdWVyeS1taWdyYXRlLTEuMi4xLmpzIl0sIm5hbWVzIjpbImpRdWVyeSIsIndpbmRvdyIsInVuZGVmaW5lZCIsIm1pZ3JhdGVXYXJuIiwibXNnIiwiY29uc29sZSIsIndhcm5lZEFib3V0IiwibWlncmF0ZVdhcm5pbmdzIiwicHVzaCIsIndhcm4iLCJtaWdyYXRlTXV0ZSIsIm1pZ3JhdGVUcmFjZSIsInRyYWNlIiwibWlncmF0ZVdhcm5Qcm9wIiwib2JqIiwicHJvcCIsInZhbHVlIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0Iiwic2V0IiwibmV3VmFsdWUiLCJlcnIiLCJfZGVmaW5lUHJvcGVydHlCcm9rZW4iLCJsb2ciLCJtaWdyYXRlUmVzZXQiLCJsZW5ndGgiLCJkb2N1bWVudCIsImNvbXBhdE1vZGUiLCJhdHRyRm4iLCJzaXplIiwiYXR0ciIsIm9sZEF0dHIiLCJ2YWx1ZUF0dHJHZXQiLCJhdHRySG9va3MiLCJ2YWx1ZUF0dHJTZXQiLCJybm9UeXBlIiwicm5vQXR0ck5vZGVUeXBlIiwicmJvb2xlYW4iLCJydXNlRGVmYXVsdCIsImVsZW0iLCJuYW1lIiwicGFzcyIsImxvd2VyTmFtZSIsInRvTG93ZXJDYXNlIiwiblR5cGUiLCJub2RlVHlwZSIsInRlc3QiLCJpc0Z1bmN0aW9uIiwiZm4iLCJub2RlTmFtZSIsInBhcmVudE5vZGUiLCJhdHRyTm9kZSIsInByb3BlcnR5IiwiZ2V0QXR0cmlidXRlTm9kZSIsIm5vZGVWYWx1ZSIsInByb3BOYW1lIiwicmVtb3ZlQXR0ciIsInByb3BGaXgiLCJzZXRBdHRyaWJ1dGUiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwiYXJndW1lbnRzIiwibWF0Y2hlZCIsImJyb3dzZXIiLCJvbGRJbml0IiwiaW5pdCIsIm9sZFBhcnNlSlNPTiIsInBhcnNlSlNPTiIsInJxdWlja0V4cHIiLCJzZWxlY3RvciIsImNvbnRleHQiLCJyb290alF1ZXJ5IiwibWF0Y2giLCJpc1BsYWluT2JqZWN0IiwiZXhlYyIsInRyaW0iLCJjaGFyQXQiLCJlcnJvciIsInBhcnNlSFRNTCIsInByb3RvdHlwZSIsImpzb24iLCJ1YU1hdGNoIiwidWEiLCJpbmRleE9mIiwidmVyc2lvbiIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImNocm9tZSIsIndlYmtpdCIsInNhZmFyaSIsInN1YiIsImpRdWVyeVN1YiIsImV4dGVuZCIsInN1cGVyY2xhc3MiLCJjb25zdHJ1Y3RvciIsInJvb3RqUXVlcnlTdWIiLCJhamF4U2V0dXAiLCJjb252ZXJ0ZXJzIiwidGV4dCBqc29uIiwib2xkRm5EYXRhIiwiZGF0YSIsInJldCIsImV2dCIsIl9kYXRhIiwicnNjcmlwdFR5cGUiLCJvbGRTZWxmIiwiYW5kU2VsZiIsImFkZEJhY2siLCJjbGVhbiIsImVsZW1zIiwiZnJhZ21lbnQiLCJzY3JpcHRzIiwib3duZXJEb2N1bWVudCIsImkiLCJoYW5kbGVTY3JpcHQiLCJqc1RhZ3MiLCJtZXJnZSIsImJ1aWxkRnJhZ21lbnQiLCJjaGlsZE5vZGVzIiwidHlwZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImdyZXAiLCJzcGxpY2UiLCJjb25jYXQiLCJldmVudEFkZCIsImV2ZW50IiwiYWRkIiwiZXZlbnRSZW1vdmUiLCJyZW1vdmUiLCJldmVudFRyaWdnZXIiLCJ0cmlnZ2VyIiwib2xkVG9nZ2xlIiwidG9nZ2xlIiwib2xkTGl2ZSIsImxpdmUiLCJvbGREaWUiLCJkaWUiLCJhamF4RXZlbnRzIiwicmFqYXhFdmVudCIsIlJlZ0V4cCIsInJob3ZlckhhY2siLCJob3ZlckhhY2siLCJldmVudHMiLCJzcGVjaWFsIiwiaG92ZXIiLCJyZXBsYWNlIiwicHJvcHMiLCJ1bnNoaWZ0IiwiZGlzcGF0Y2giLCJ0eXBlcyIsImhhbmRsZXIiLCJtYXBwZWRUeXBlcyIsImFyZ3MiLCJBcnJheSIsInNsaWNlIiwiYmluZCIsInRyaWdnZXJIYW5kbGVyIiwiZm4yIiwiZ3VpZCIsInRvZ2dsZXIiLCJsYXN0VG9nZ2xlIiwicHJldmVudERlZmF1bHQiLCJjbGljayIsIm9uIiwib2ZmIiwib25seUhhbmRsZXJzIiwiZWFjaCIsInNwbGl0IiwiXyIsInNldHVwIiwidGVhcmRvd24iXSwibWFwcGluZ3MiOiJDQUtBLFNBQVdBLEVBQVFDLEVBQVFDLEdBNkIzQixRQUFTQyxHQUFhQyxHQUNyQixHQUFJQyxHQUFVSixFQUFPSSxPQUNmQyxHQUFhRixLQUNsQkUsRUFBYUYsSUFBUSxFQUNyQkosRUFBT08sZ0JBQWdCQyxLQUFNSixHQUN4QkMsR0FBV0EsRUFBUUksT0FBU1QsRUFBT1UsY0FDdkNMLEVBQVFJLEtBQU0sY0FBZ0JMLEdBQ3pCSixFQUFPVyxjQUFnQk4sRUFBUU8sT0FDbkNQLEVBQVFPLFVBTVosUUFBU0MsR0FBaUJDLEVBQUtDLEVBQU1DLEVBQU9aLEdBQzNDLEdBQUthLE9BQU9DLGVBR1gsSUFhQyxXQVpBRCxRQUFPQyxlQUFnQkosRUFBS0MsR0FDM0JJLGNBQWMsRUFDZEMsWUFBWSxFQUNaQyxJQUFLLFdBRUosTUFEQWxCLEdBQWFDLEdBQ05ZLEdBRVJNLElBQUssU0FBVUMsR0FDZHBCLEVBQWFDLEdBQ2JZLEVBQVFPLEtBSVQsTUFBT0MsSUFNVnhCLEVBQU95Qix1QkFBd0IsRUFDL0JYLEVBQUtDLEdBQVNDLEVBL0RmLEdBQUlWLEtBR0pOLEdBQU9PLG9CQU1EUCxFQUFPVSxhQUFlVCxFQUFPSSxTQUFXSixFQUFPSSxRQUFRcUIsS0FDNUR6QixFQUFPSSxRQUFRcUIsSUFBSSxnQ0FJZjFCLEVBQU9XLGVBQWlCVCxJQUM1QkYsRUFBT1csY0FBZSxHQUl2QlgsRUFBTzJCLGFBQWUsV0FDckJyQixLQUNBTixFQUFPTyxnQkFBZ0JxQixPQUFTLEdBNkNKLGVBQXhCQyxTQUFTQyxZQUViM0IsRUFBYSw0Q0FJZCxJQUFJNEIsR0FBUy9CLEVBQVEsWUFBY2dDLEtBQU0sSUFBTUMsS0FBSyxTQUFXakMsRUFBTytCLE9BQ3JFRyxFQUFVbEMsRUFBT2lDLEtBQ2pCRSxFQUFlbkMsRUFB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Q3JCb0ksTUFBTyxXQUNOLEdBQUlySSxHQUFPc0IsSUFTWCxPQU5LdEIsS0FBU2IsV0FDYjdCLEVBQU9tSSxNQUFNQyxJQUFLdkcsU0FBVWMsRUFBTyxJQUFNM0MsRUFBT29LLEtBQU0sV0FDckRwSyxFQUFPbUksTUFBTUssUUFBUzdGLEVBQU0sS0FBTUQsR0FBTSxLQUV6QzFDLEVBQU8yRyxNQUFPM0MsS0FBTXJCLEVBQU0zQyxFQUFPb0ssVUFFM0IsR0FFUlksU0FBVSxXQUlULE1BSEtoSCxRQUFTbkMsVUFDYjdCLEVBQU9tSSxNQUFNRyxPQUFRekcsU0FBVWMsRUFBTyxJQUFNM0MsRUFBTzJHLE1BQU8zQyxLQUFNckIsS0FFMUQsT0FPUDNDLE9BQVFDIiwiZmlsZSI6ImpxdWVyeS1taWdyYXRlLTEuMi4xLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohXG4gKiBqUXVlcnkgTWlncmF0ZSAtIHYxLjIuMSAtIDIwMTMtMDUtMDhcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlcnkvanF1ZXJ5LW1pZ3JhdGVcbiAqIENvcHlyaWdodCAyMDA1LCAyMDEzIGpRdWVyeSBGb3VuZGF0aW9uLCBJbmMuIGFuZCBvdGhlciBjb250cmlidXRvcnM7IExpY2Vuc2VkIE1JVFxuICovXG4oZnVuY3Rpb24oIGpRdWVyeSwgd2luZG93LCB1bmRlZmluZWQgKSB7XG4vLyBTZWUgaHR0cDovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzMzVcbi8vIFwidXNlIHN0cmljdFwiO1xuXG5cbnZhciB3YXJuZWRBYm91dCA9IHt9O1xuXG4vLyBMaXN0IG9mIHdhcm5pbmdzIGFscmVhZHkgZ2l2ZW47IHB1YmxpYyByZWFkIG9ubHlcbmpRdWVyeS5taWdyYXRlV2FybmluZ3MgPSBbXTtcblxuLy8gU2V0IHRvIHRydWUgdG8gcHJldmVudCBjb25zb2xlIG91dHB1dDsgbWlncmF0ZVdhcm5pbmdzIHN0aWxsIG1haW50YWluZWRcbi8vIGpRdWVyeS5taWdyYXRlTXV0ZSA9IGZhbHNlO1xuXG4vLyBTaG93IGEgbWVzc2FnZSBvbiB0aGUgY29uc29sZSBzbyBkZXZzIGtub3cgd2UncmUgYWN0aXZlXG5pZiAoICFqUXVlcnkubWlncmF0ZU11dGUgJiYgd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nICkge1xuXHR3aW5kb3cuY29uc29sZS5sb2coXCJKUU1JR1JBVEU6IExvZ2dpbmcgaXMgYWN0aXZlXCIpO1xufVxuXG4vLyBTZXQgdG8gZmFsc2UgdG8gZGlzYWJsZSB0cmFjZXMgdGhhdCBhcHBlYXIgd2l0aCB3YXJuaW5nc1xuaWYgKCBqUXVlcnkubWlncmF0ZVRyYWNlID09PSB1bmRlZmluZWQgKSB7XG5cdGpRdWVyeS5taWdyYXRlVHJhY2UgPSB0cnVlO1xufVxuXG4vLyBGb3JnZXQgYW55IHdhcm5pbmdzIHdlJ3ZlIGFscmVhZHkgZ2l2ZW47IHB1YmxpY1xualF1ZXJ5Lm1pZ3JhdGVSZXNldCA9IGZ1bmN0aW9uKCkge1xuXHR3YXJuZWRBYm91dCA9IHt9O1xuXHRqUXVlcnkubWlncmF0ZVdhcm5pbmdzLmxlbmd0aCA9IDA7XG59O1xuXG5mdW5jdGlvbiBtaWdyYXRlV2FybiggbXNnKSB7XG5cdHZhciBjb25zb2xlID0gd2luZG93LmNvbnNvbGU7XG5cdGlmICggIXdhcm5lZEFib3V0WyBtc2cgXSApIHtcblx0XHR3YXJuZWRBYm91dFsgbXNnIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5taWdyYXRlV2FybmluZ3MucHVzaCggbXNnICk7XG5cdFx0aWYgKCBjb25zb2xlICYmIGNvbnNvbGUud2FybiAmJiAhalF1ZXJ5Lm1pZ3JhdGVNdXRlICkge1xuXHRcdFx0Y29uc29sZS53YXJuKCBcIkpRTUlHUkFURTogXCIgKyBtc2cgKTtcblx0XHRcdGlmICggalF1ZXJ5Lm1pZ3JhdGVUcmFjZSAmJiBjb25zb2xlLnRyYWNlICkge1xuXHRcdFx0XHRjb25zb2xlLnRyYWNlKCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIG1pZ3JhdGVXYXJuUHJvcCggb2JqLCBwcm9wLCB2YWx1ZSwgbXNnICkge1xuXHRpZiAoIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSApIHtcblx0XHQvLyBPbiBFUzUgYnJvd3NlcnMgKG5vbi1vbGRJRSksIHdhcm4gaWYgdGhlIGNvZGUgdHJpZXMgdG8gZ2V0IHByb3A7XG5cdFx0Ly8gYWxsb3cgcHJvcGVydHkgdG8gYmUgb3ZlcndyaXR0ZW4gaW4gY2FzZSBzb21lIG90aGVyIHBsdWdpbiB3YW50cyBpdFxuXHRcdHRyeSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIG9iaiwgcHJvcCwge1xuXHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bWlncmF0ZVdhcm4oIG1zZyApO1xuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fSxcblx0XHRcdFx0c2V0OiBmdW5jdGlvbiggbmV3VmFsdWUgKSB7XG5cdFx0XHRcdFx0bWlncmF0ZVdhcm4oIG1zZyApO1xuXHRcdFx0XHRcdHZhbHVlID0gbmV3VmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH0gY2F0Y2goIGVyciApIHtcblx0XHRcdC8vIElFOCBpcyBhIGRvcGUgYWJvdXQgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBjYW4ndCB3YXJuIHRoZXJlXG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9uLUVTNSAob3IgYnJva2VuKSBicm93c2VyOyBqdXN0IHNldCB0aGUgcHJvcGVydHlcblx0alF1ZXJ5Ll9kZWZpbmVQcm9wZXJ0eUJyb2tlbiA9IHRydWU7XG5cdG9ialsgcHJvcCBdID0gdmFsdWU7XG59XG5cbmlmICggZG9jdW1lbnQuY29tcGF0TW9kZSA9PT0gXCJCYWNrQ29tcGF0XCIgKSB7XG5cdC8vIGpRdWVyeSBoYXMgbmV2ZXIgc3VwcG9ydGVkIG9yIHRlc3RlZCBRdWlya3MgTW9kZVxuXHRtaWdyYXRlV2FybiggXCJqUXVlcnkgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBRdWlya3MgTW9kZVwiICk7XG59XG5cblxudmFyIGF0dHJGbiA9IGpRdWVyeSggXCI8aW5wdXQvPlwiLCB7IHNpemU6IDEgfSApLmF0dHIoXCJzaXplXCIpICYmIGpRdWVyeS5hdHRyRm4sXG5cdG9sZEF0dHIgPSBqUXVlcnkuYXR0cixcblx0dmFsdWVBdHRyR2V0ID0galF1ZXJ5LmF0dHJIb29rcy52YWx1ZSAmJiBqUXVlcnkuYXR0ckhvb2tzLnZhbHVlLmdldCB8fFxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gbnVsbDsgfSxcblx0dmFsdWVBdHRyU2V0ID0galF1ZXJ5LmF0dHJIb29rcy52YWx1ZSAmJiBqUXVlcnkuYXR0ckhvb2tzLnZhbHVlLnNldCB8fFxuXHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuXHRybm9UeXBlID0gL14oPzppbnB1dHxidXR0b24pJC9pLFxuXHRybm9BdHRyTm9kZVR5cGUgPSAvXlsyMzhdJC8sXG5cdHJib29sZWFuID0gL14oPzphdXRvZm9jdXN8YXV0b3BsYXl8YXN5bmN8Y2hlY2tlZHxjb250cm9sc3xkZWZlcnxkaXNhYmxlZHxoaWRkZW58bG9vcHxtdWx0aXBsZXxvcGVufHJlYWRvbmx5fHJlcXVpcmVkfHNjb3BlZHxzZWxlY3RlZCkkL2ksXG5cdHJ1c2VEZWZhdWx0ID0gL14oPzpjaGVja2VkfHNlbGVjdGVkKSQvaTtcblxuLy8galF1ZXJ5LmF0dHJGblxubWlncmF0ZVdhcm5Qcm9wKCBqUXVlcnksIFwiYXR0ckZuXCIsIGF0dHJGbiB8fCB7fSwgXCJqUXVlcnkuYXR0ckZuIGlzIGRlcHJlY2F0ZWRcIiApO1xuXG5qUXVlcnkuYXR0ciA9IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSwgcGFzcyApIHtcblx0dmFyIGxvd2VyTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKSxcblx0XHRuVHlwZSA9IGVsZW0gJiYgZWxlbS5ub2RlVHlwZTtcblxuXHRpZiAoIHBhc3MgKSB7XG5cdFx0Ly8gU2luY2UgcGFzcyBpcyB1c2VkIGludGVybmFsbHksIHdlIG9ubHkgd2FybiBmb3IgbmV3IGpRdWVyeVxuXHRcdC8vIHZlcnNpb25zIHdoZXJlIHRoZXJlIGlzbid0IGEgcGFzcyBhcmcgaW4gdGhlIGZvcm1hbCBwYXJhbXNcblx0XHRpZiAoIG9sZEF0dHIubGVuZ3RoIDwgNCApIHtcblx0XHRcdG1pZ3JhdGVXYXJuKFwialF1ZXJ5LmZuLmF0dHIoIHByb3BzLCBwYXNzICkgaXMgZGVwcmVjYXRlZFwiKTtcblx0XHR9XG5cdFx0aWYgKCBlbGVtICYmICFybm9BdHRyTm9kZVR5cGUudGVzdCggblR5cGUgKSAmJlxuXHRcdFx0KGF0dHJGbiA/IG5hbWUgaW4gYXR0ckZuIDogalF1ZXJ5LmlzRnVuY3Rpb24oalF1ZXJ5LmZuW25hbWVdKSkgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtIClbIG5hbWUgXSggdmFsdWUgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBXYXJuIGlmIHVzZXIgdHJpZXMgdG8gc2V0IGB0eXBlYCwgc2luY2UgaXQgYnJlYWtzIG9uIElFIDYvNy84OyBieSBjaGVja2luZ1xuXHQvLyBmb3IgZGlzY29ubmVjdGVkIGVsZW1lbnRzIHdlIGRvbid0IHdhcm4gb24gJCggXCI8YnV0dG9uPlwiLCB7IHR5cGU6IFwiYnV0dG9uXCIgfSApLlxuXHRpZiAoIG5hbWUgPT09IFwidHlwZVwiICYmIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgcm5vVHlwZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgJiYgZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdG1pZ3JhdGVXYXJuKFwiQ2FuJ3QgY2hhbmdlIHRoZSAndHlwZScgb2YgYW4gaW5wdXQgb3IgYnV0dG9uIGluIElFIDYvNy84XCIpO1xuXHR9XG5cblx0Ly8gUmVzdG9yZSBib29sSG9vayBmb3IgYm9vbGVhbiBwcm9wZXJ0eS9hdHRyaWJ1dGUgc3luY2hyb25pemF0aW9uXG5cdGlmICggIWpRdWVyeS5hdHRySG9va3NbIGxvd2VyTmFtZSBdICYmIHJib29sZWFuLnRlc3QoIGxvd2VyTmFtZSApICkge1xuXHRcdGpRdWVyeS5hdHRySG9va3NbIGxvd2VyTmFtZSBdID0ge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRcdFx0Ly8gQWxpZ24gYm9vbGVhbiBhdHRyaWJ1dGVzIHdpdGggY29ycmVzcG9uZGluZyBwcm9wZXJ0aWVzXG5cdFx0XHRcdC8vIEZhbGwgYmFjayB0byBhdHRyaWJ1dGUgcHJlc2VuY2Ugd2hlcmUgc29tZSBib29sZWFucyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdFx0XHR2YXIgYXR0ck5vZGUsXG5cdFx0XHRcdFx0cHJvcGVydHkgPSBqUXVlcnkucHJvcCggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHRyZXR1cm4gcHJvcGVydHkgPT09IHRydWUgfHwgdHlwZW9mIHByb3BlcnR5ICE9PSBcImJvb2xlYW5cIiAmJlxuXHRcdFx0XHRcdCggYXR0ck5vZGUgPSBlbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkgKSAmJiBhdHRyTm9kZS5ub2RlVmFsdWUgIT09IGZhbHNlID9cblxuXHRcdFx0XHRcdG5hbWUudG9Mb3dlckNhc2UoKSA6XG5cdFx0XHRcdFx0dW5kZWZpbmVkO1xuXHRcdFx0fSxcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdFx0XHR2YXIgcHJvcE5hbWU7XG5cdFx0XHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHZhbHVlIGlzIHRydWUgc2luY2Ugd2Uga25vdyBhdCB0aGlzIHBvaW50IGl0J3MgdHlwZSBib29sZWFuIGFuZCBub3QgZmFsc2Vcblx0XHRcdFx0XHQvLyBTZXQgYm9vbGVhbiBhdHRyaWJ1dGVzIHRvIHRoZSBzYW1lIG5hbWUgYW5kIHNldCB0aGUgRE9NIHByb3BlcnR5XG5cdFx0XHRcdFx0cHJvcE5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0aWYgKCBwcm9wTmFtZSBpbiBlbGVtICkge1xuXHRcdFx0XHRcdFx0Ly8gT25seSBzZXQgdGhlIElETCBzcGVjaWZpY2FsbHkgaWYgaXQgYWxyZWFkeSBleGlzdHMgb24gdGhlIGVsZW1lbnRcblx0XHRcdFx0XHRcdGVsZW1bIHByb3BOYW1lIF0gPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gbmFtZTtcblx0XHRcdH1cblx0XHR9O1xuXG5cdFx0Ly8gV2FybiBvbmx5IGZvciBhdHRyaWJ1dGVzIHRoYXQgY2FuIHJlbWFpbiBkaXN0aW5jdCBmcm9tIHRoZWlyIHByb3BlcnRpZXMgcG9zdC0xLjlcblx0XHRpZiAoIHJ1c2VEZWZhdWx0LnRlc3QoIGxvd2VyTmFtZSApICkge1xuXHRcdFx0bWlncmF0ZVdhcm4oIFwialF1ZXJ5LmZuLmF0dHIoJ1wiICsgbG93ZXJOYW1lICsgXCInKSBtYXkgdXNlIHByb3BlcnR5IGluc3RlYWQgb2YgYXR0cmlidXRlXCIgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gb2xkQXR0ci5jYWxsKCBqUXVlcnksIGVsZW0sIG5hbWUsIHZhbHVlICk7XG59O1xuXG4vLyBhdHRySG9va3M6IHZhbHVlXG5qUXVlcnkuYXR0ckhvb2tzLnZhbHVlID0ge1xuXHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdHZhciBub2RlTmFtZSA9ICggZWxlbS5ub2RlTmFtZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRpZiAoIG5vZGVOYW1lID09PSBcImJ1dHRvblwiICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlQXR0ckdldC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHRcdGlmICggbm9kZU5hbWUgIT09IFwiaW5wdXRcIiAmJiBub2RlTmFtZSAhPT0gXCJvcHRpb25cIiApIHtcblx0XHRcdG1pZ3JhdGVXYXJuKFwialF1ZXJ5LmZuLmF0dHIoJ3ZhbHVlJykgbm8gbG9uZ2VyIGdldHMgcHJvcGVydGllc1wiKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5hbWUgaW4gZWxlbSA/XG5cdFx0XHRlbGVtLnZhbHVlIDpcblx0XHRcdG51bGw7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBub2RlTmFtZSA9ICggZWxlbS5ub2RlTmFtZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRpZiAoIG5vZGVOYW1lID09PSBcImJ1dHRvblwiICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlQXR0clNldC5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0fVxuXHRcdGlmICggbm9kZU5hbWUgIT09IFwiaW5wdXRcIiAmJiBub2RlTmFtZSAhPT0gXCJvcHRpb25cIiApIHtcblx0XHRcdG1pZ3JhdGVXYXJuKFwialF1ZXJ5LmZuLmF0dHIoJ3ZhbHVlJywgdmFsKSBubyBsb25nZXIgc2V0cyBwcm9wZXJ0aWVzXCIpO1xuXHRcdH1cblx0XHQvLyBEb2VzIG5vdCByZXR1cm4gc28gdGhhdCBzZXRBdHRyaWJ1dGUgaXMgYWxzbyB1c2VkXG5cdFx0ZWxlbS52YWx1ZSA9IHZhbHVlO1xuXHR9XG59O1xuXG5cbnZhciBtYXRjaGVkLCBicm93c2VyLFxuXHRvbGRJbml0ID0galF1ZXJ5LmZuLmluaXQsXG5cdG9sZFBhcnNlSlNPTiA9IGpRdWVyeS5wYXJzZUpTT04sXG5cdC8vIE5vdGU6IFhTUyBjaGVjayBpcyBkb25lIGJlbG93IGFmdGVyIHN0cmluZyBpcyB0cmltbWVkXG5cdHJxdWlja0V4cHIgPSAvXihbXjxdKikoPFtcXHdcXFddKz4pKFtePl0qKSQvO1xuXG4vLyAkKGh0bWwpIFwibG9va3MgbGlrZSBodG1sXCIgcnVsZSBjaGFuZ2VcbmpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290alF1ZXJ5ICkge1xuXHR2YXIgbWF0Y2g7XG5cblx0aWYgKCBzZWxlY3RvciAmJiB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgIWpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgJiZcblx0XHRcdChtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggalF1ZXJ5LnRyaW0oIHNlbGVjdG9yICkgKSkgJiYgbWF0Y2hbIDAgXSApIHtcblx0XHQvLyBUaGlzIGlzIGFuIEhUTUwgc3RyaW5nIGFjY29yZGluZyB0byB0aGUgXCJvbGRcIiBydWxlczsgaXMgaXQgc3RpbGw/XG5cdFx0aWYgKCBzZWxlY3Rvci5jaGFyQXQoIDAgKSAhPT0gXCI8XCIgKSB7XG5cdFx0XHRtaWdyYXRlV2FybihcIiQoaHRtbCkgSFRNTCBzdHJpbmdzIG11c3Qgc3RhcnQgd2l0aCAnPCcgY2hhcmFjdGVyXCIpO1xuXHRcdH1cblx0XHRpZiAoIG1hdGNoWyAzIF0gKSB7XG5cdFx0XHRtaWdyYXRlV2FybihcIiQoaHRtbCkgSFRNTCB0ZXh0IGFmdGVyIGxhc3QgdGFnIGlzIGlnbm9yZWRcIik7XG5cdFx0fVxuXHRcdC8vIENvbnNpc3RlbnRseSByZWplY3QgYW55IEhUTUwtbGlrZSBzdHJpbmcgc3RhcnRpbmcgd2l0aCBhIGhhc2ggKCM5NTIxKVxuXHRcdC8vIE5vdGUgdGhhdCB0aGlzIG1heSBicmVhayBqUXVlcnkgMS42LnggY29kZSB0aGF0IG90aGVyd2lzZSB3b3VsZCB3b3JrLlxuXHRcdGlmICggbWF0Y2hbIDAgXS5jaGFyQXQoIDAgKSA9PT0gXCIjXCIgKSB7XG5cdFx0XHRtaWdyYXRlV2FybihcIkhUTUwgc3RyaW5nIGNhbm5vdCBzdGFydCB3aXRoIGEgJyMnIGNoYXJhY3RlclwiKTtcblx0XHRcdGpRdWVyeS5lcnJvcihcIkpRTUlHUkFURTogSW52YWxpZCBzZWxlY3RvciBzdHJpbmcgKFhTUylcIik7XG5cdFx0fVxuXHRcdC8vIE5vdyBwcm9jZXNzIHVzaW5nIGxvb3NlIHJ1bGVzOyBsZXQgcHJlLTEuOCBwbGF5IHRvb1xuXHRcdGlmICggY29udGV4dCAmJiBjb250ZXh0LmNvbnRleHQgKSB7XG5cdFx0XHQvLyBqUXVlcnkgb2JqZWN0IGFzIGNvbnRleHQ7IHBhcnNlSFRNTCBleHBlY3RzIGEgRE9NIG9iamVjdFxuXHRcdFx0Y29udGV4dCA9IGNvbnRleHQuY29udGV4dDtcblx0XHR9XG5cdFx0aWYgKCBqUXVlcnkucGFyc2VIVE1MICkge1xuXHRcdFx0cmV0dXJuIG9sZEluaXQuY2FsbCggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTCggbWF0Y2hbIDIgXSwgY29udGV4dCwgdHJ1ZSApLFxuXHRcdFx0XHRcdGNvbnRleHQsIHJvb3RqUXVlcnkgKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG9sZEluaXQuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xufTtcbmpRdWVyeS5mbi5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gTGV0ICQucGFyc2VKU09OKGZhbHN5X3ZhbHVlKSByZXR1cm4gbnVsbFxualF1ZXJ5LnBhcnNlSlNPTiA9IGZ1bmN0aW9uKCBqc29uICkge1xuXHRpZiAoICFqc29uICYmIGpzb24gIT09IG51bGwgKSB7XG5cdFx0bWlncmF0ZVdhcm4oXCJqUXVlcnkucGFyc2VKU09OIHJlcXVpcmVzIGEgdmFsaWQgSlNPTiBzdHJpbmdcIik7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblx0cmV0dXJuIG9sZFBhcnNlSlNPTi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG59O1xuXG5qUXVlcnkudWFNYXRjaCA9IGZ1bmN0aW9uKCB1YSApIHtcblx0dWEgPSB1YS50b0xvd2VyQ2FzZSgpO1xuXG5cdHZhciBtYXRjaCA9IC8oY2hyb21lKVsgXFwvXShbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuXHRcdC8od2Via2l0KVsgXFwvXShbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuXHRcdC8ob3BlcmEpKD86Lip2ZXJzaW9ufClbIFxcL10oW1xcdy5dKykvLmV4ZWMoIHVhICkgfHxcblx0XHQvKG1zaWUpIChbXFx3Ll0rKS8uZXhlYyggdWEgKSB8fFxuXHRcdHVhLmluZGV4T2YoXCJjb21wYXRpYmxlXCIpIDwgMCAmJiAvKG1vemlsbGEpKD86Lio/IHJ2OihbXFx3Ll0rKXwpLy5leGVjKCB1YSApIHx8XG5cdFx0W107XG5cblx0cmV0dXJuIHtcblx0XHRicm93c2VyOiBtYXRjaFsgMSBdIHx8IFwiXCIsXG5cdFx0dmVyc2lvbjogbWF0Y2hbIDIgXSB8fCBcIjBcIlxuXHR9O1xufTtcblxuLy8gRG9uJ3QgY2xvYmJlciBhbnkgZXhpc3RpbmcgalF1ZXJ5LmJyb3dzZXIgaW4gY2FzZSBpdCdzIGRpZmZlcmVudFxuaWYgKCAhalF1ZXJ5LmJyb3dzZXIgKSB7XG5cdG1hdGNoZWQgPSBqUXVlcnkudWFNYXRjaCggbmF2aWdhdG9yLnVzZXJBZ2VudCApO1xuXHRicm93c2VyID0ge307XG5cblx0aWYgKCBtYXRjaGVkLmJyb3dzZXIgKSB7XG5cdFx0YnJvd3NlclsgbWF0Y2hlZC5icm93c2VyIF0gPSB0cnVlO1xuXHRcdGJyb3dzZXIudmVyc2lvbiA9IG1hdGNoZWQudmVyc2lvbjtcblx0fVxuXG5cdC8vIENocm9tZSBpcyBXZWJraXQsIGJ1dCBXZWJraXQgaXMgYWxzbyBTYWZhcmkuXG5cdGlmICggYnJvd3Nlci5jaHJvbWUgKSB7XG5cdFx0YnJvd3Nlci53ZWJraXQgPSB0cnVlO1xuXHR9IGVsc2UgaWYgKCBicm93c2VyLndlYmtpdCApIHtcblx0XHRicm93c2VyLnNhZmFyaSA9IHRydWU7XG5cdH1cblxuXHRqUXVlcnkuYnJvd3NlciA9IGJyb3dzZXI7XG59XG5cbi8vIFdhcm4gaWYgdGhlIGNvZGUgdHJpZXMgdG8gZ2V0IGpRdWVyeS5icm93c2VyXG5taWdyYXRlV2FyblByb3AoIGpRdWVyeSwgXCJicm93c2VyXCIsIGpRdWVyeS5icm93c2VyLCBcImpRdWVyeS5icm93c2VyIGlzIGRlcHJlY2F0ZWRcIiApO1xuXG5qUXVlcnkuc3ViID0gZnVuY3Rpb24oKSB7XG5cdGZ1bmN0aW9uIGpRdWVyeVN1Yiggc2VsZWN0b3IsIGNvbnRleHQgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnlTdWIuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fVxuXHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCBqUXVlcnlTdWIsIHRoaXMgKTtcblx0alF1ZXJ5U3ViLnN1cGVyY2xhc3MgPSB0aGlzO1xuXHRqUXVlcnlTdWIuZm4gPSBqUXVlcnlTdWIucHJvdG90eXBlID0gdGhpcygpO1xuXHRqUXVlcnlTdWIuZm4uY29uc3RydWN0b3IgPSBqUXVlcnlTdWI7XG5cdGpRdWVyeVN1Yi5zdWIgPSB0aGlzLnN1Yjtcblx0alF1ZXJ5U3ViLmZuLmluaXQgPSBmdW5jdGlvbiBpbml0KCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRpZiAoIGNvbnRleHQgJiYgY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSAmJiAhKGNvbnRleHQgaW5zdGFuY2VvZiBqUXVlcnlTdWIpICkge1xuXHRcdFx0Y29udGV4dCA9IGpRdWVyeVN1YiggY29udGV4dCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkuZm4uaW5pdC5jYWxsKCB0aGlzLCBzZWxlY3RvciwgY29udGV4dCwgcm9vdGpRdWVyeVN1YiApO1xuXHR9O1xuXHRqUXVlcnlTdWIuZm4uaW5pdC5wcm90b3R5cGUgPSBqUXVlcnlTdWIuZm47XG5cdHZhciByb290alF1ZXJ5U3ViID0galF1ZXJ5U3ViKGRvY3VtZW50KTtcblx0bWlncmF0ZVdhcm4oIFwialF1ZXJ5LnN1YigpIGlzIGRlcHJlY2F0ZWRcIiApO1xuXHRyZXR1cm4galF1ZXJ5U3ViO1xufTtcblxuXG4vLyBFbnN1cmUgdGhhdCAkLmFqYXggZ2V0cyB0aGUgbmV3IHBhcnNlSlNPTiBkZWZpbmVkIGluIGNvcmUuanNcbmpRdWVyeS5hamF4U2V0dXAoe1xuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IGpzb25cIjogalF1ZXJ5LnBhcnNlSlNPTlxuXHR9XG59KTtcblxuXG52YXIgb2xkRm5EYXRhID0galF1ZXJ5LmZuLmRhdGE7XG5cbmpRdWVyeS5mbi5kYXRhID0gZnVuY3Rpb24oIG5hbWUgKSB7XG5cdHZhciByZXQsIGV2dCxcblx0XHRlbGVtID0gdGhpc1swXTtcblxuXHQvLyBIYW5kbGVzIDEuNyB3aGljaCBoYXMgdGhpcyBiZWhhdmlvciBhbmQgMS44IHdoaWNoIGRvZXNuJ3Rcblx0aWYgKCBlbGVtICYmIG5hbWUgPT09IFwiZXZlbnRzXCIgJiYgYXJndW1lbnRzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRyZXQgPSBqUXVlcnkuZGF0YSggZWxlbSwgbmFtZSApO1xuXHRcdGV2dCA9IGpRdWVyeS5fZGF0YSggZWxlbSwgbmFtZSApO1xuXHRcdGlmICggKCByZXQgPT09IHVuZGVmaW5lZCB8fCByZXQgPT09IGV2dCApICYmIGV2dCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0bWlncmF0ZVdhcm4oXCJVc2Ugb2YgalF1ZXJ5LmZuLmRhdGEoJ2V2ZW50cycpIGlzIGRlcHJlY2F0ZWRcIik7XG5cdFx0XHRyZXR1cm4gZXZ0O1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gb2xkRm5EYXRhLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbn07XG5cblxudmFyIHJzY3JpcHRUeXBlID0gL1xcLyhqYXZhfGVjbWEpc2NyaXB0L2ksXG5cdG9sZFNlbGYgPSBqUXVlcnkuZm4uYW5kU2VsZiB8fCBqUXVlcnkuZm4uYWRkQmFjaztcblxualF1ZXJ5LmZuLmFuZFNlbGYgPSBmdW5jdGlvbigpIHtcblx0bWlncmF0ZVdhcm4oXCJqUXVlcnkuZm4uYW5kU2VsZigpIHJlcGxhY2VkIGJ5IGpRdWVyeS5mbi5hZGRCYWNrKClcIik7XG5cdHJldHVybiBvbGRTZWxmLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcbn07XG5cbi8vIFNpbmNlIGpRdWVyeS5jbGVhbiBpcyB1c2VkIGludGVybmFsbHkgb24gb2xkZXIgdmVyc2lvbnMsIHdlIG9ubHkgc2hpbSBpZiBpdCdzIG1pc3NpbmdcbmlmICggIWpRdWVyeS5jbGVhbiApIHtcblx0alF1ZXJ5LmNsZWFuID0gZnVuY3Rpb24oIGVsZW1zLCBjb250ZXh0LCBmcmFnbWVudCwgc2NyaXB0cyApIHtcblx0XHQvLyBTZXQgY29udGV4dCBwZXIgMS44IGxvZ2ljXG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cdFx0Y29udGV4dCA9ICFjb250ZXh0Lm5vZGVUeXBlICYmIGNvbnRleHRbMF0gfHwgY29udGV4dDtcblx0XHRjb250ZXh0ID0gY29udGV4dC5vd25lckRvY3VtZW50IHx8IGNvbnRleHQ7XG5cblx0XHRtaWdyYXRlV2FybihcImpRdWVyeS5jbGVhbigpIGlzIGRlcHJlY2F0ZWRcIik7XG5cblx0XHR2YXIgaSwgZWxlbSwgaGFuZGxlU2NyaXB0LCBqc1RhZ3MsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdGpRdWVyeS5tZXJnZSggcmV0LCBqUXVlcnkuYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQgKS5jaGlsZE5vZGVzICk7XG5cblx0XHQvLyBDb21wbGV4IGxvZ2ljIGxpZnRlZCBkaXJlY3RseSBmcm9tIGpRdWVyeSAxLjhcblx0XHRpZiAoIGZyYWdtZW50ICkge1xuXHRcdFx0Ly8gU3BlY2lhbCBoYW5kbGluZyBvZiBlYWNoIHNjcmlwdCBlbGVtZW50XG5cdFx0XHRoYW5kbGVTY3JpcHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgd2UgY29uc2lkZXIgaXQgZXhlY3V0YWJsZVxuXHRcdFx0XHRpZiAoICFlbGVtLnR5cGUgfHwgcnNjcmlwdFR5cGUudGVzdCggZWxlbS50eXBlICkgKSB7XG5cdFx0XHRcdFx0Ly8gRGV0YWNoIHRoZSBzY3JpcHQgYW5kIHN0b3JlIGl0IGluIHRoZSBzY3JpcHRzIGFycmF5IChpZiBwcm92aWRlZCkgb3IgdGhlIGZyYWdtZW50XG5cdFx0XHRcdFx0Ly8gUmV0dXJuIHRydXRoeSB0byBpbmRpY2F0ZSB0aGF0IGl0IGhhcyBiZWVuIGhhbmRsZWRcblx0XHRcdFx0XHRyZXR1cm4gc2NyaXB0cyA/XG5cdFx0XHRcdFx0XHRzY3JpcHRzLnB1c2goIGVsZW0ucGFyZW50Tm9kZSA/IGVsZW0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWxlbSApIDogZWxlbSApIDpcblx0XHRcdFx0XHRcdGZyYWdtZW50LmFwcGVuZENoaWxkKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cblx0XHRcdGZvciAoIGkgPSAwOyAoZWxlbSA9IHJldFtpXSkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0XHQvLyBDaGVjayBpZiB3ZSdyZSBkb25lIGFmdGVyIGhhbmRsaW5nIGFuIGV4ZWN1dGFibGUgc2NyaXB0XG5cdFx0XHRcdGlmICggISggalF1ZXJ5Lm5vZGVOYW1lKCBlbGVtLCBcInNjcmlwdFwiICkgJiYgaGFuZGxlU2NyaXB0KCBlbGVtICkgKSApIHtcblx0XHRcdFx0XHQvLyBBcHBlbmQgdG8gZnJhZ21lbnQgYW5kIGhhbmRsZSBlbWJlZGRlZCBzY3JpcHRzXG5cdFx0XHRcdFx0ZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdFx0XHRpZiAoIHR5cGVvZiBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0XHRcdFx0Ly8gaGFuZGxlU2NyaXB0IGFsdGVycyB0aGUgRE9NLCBzbyB1c2UgalF1ZXJ5Lm1lcmdlIHRvIGVuc3VyZSBzbmFwc2hvdCBpdGVyYXRpb25cblx0XHRcdFx0XHRcdGpzVGFncyA9IGpRdWVyeS5ncmVwKCBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpICksIGhhbmRsZVNjcmlwdCApO1xuXG5cdFx0XHRcdFx0XHQvLyBTcGxpY2UgdGhlIHNjcmlwdHMgaW50byByZXQgYWZ0ZXIgdGhlaXIgZm9ybWVyIGFuY2VzdG9yIGFuZCBhZHZhbmNlIG91ciBpbmRleCBiZXlvbmQgdGhlbVxuXHRcdFx0XHRcdFx0cmV0LnNwbGljZS5hcHBseSggcmV0LCBbaSArIDEsIDBdLmNvbmNhdCgganNUYWdzICkgKTtcblx0XHRcdFx0XHRcdGkgKz0ganNUYWdzLmxlbmd0aDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufVxuXG52YXIgZXZlbnRBZGQgPSBqUXVlcnkuZXZlbnQuYWRkLFxuXHRldmVudFJlbW92ZSA9IGpRdWVyeS5ldmVudC5yZW1vdmUsXG5cdGV2ZW50VHJpZ2dlciA9IGpRdWVyeS5ldmVudC50cmlnZ2VyLFxuXHRvbGRUb2dnbGUgPSBqUXVlcnkuZm4udG9nZ2xlLFxuXHRvbGRMaXZlID0galF1ZXJ5LmZuLmxpdmUsXG5cdG9sZERpZSA9IGpRdWVyeS5mbi5kaWUsXG5cdGFqYXhFdmVudHMgPSBcImFqYXhTdGFydHxhamF4U3RvcHxhamF4U2VuZHxhamF4Q29tcGxldGV8YWpheEVycm9yfGFqYXhTdWNjZXNzXCIsXG5cdHJhamF4RXZlbnQgPSBuZXcgUmVnRXhwKCBcIlxcXFxiKD86XCIgKyBhamF4RXZlbnRzICsgXCIpXFxcXGJcIiApLFxuXHRyaG92ZXJIYWNrID0gLyg/Ol58XFxzKWhvdmVyKFxcLlxcUyt8KVxcYi8sXG5cdGhvdmVySGFjayA9IGZ1bmN0aW9uKCBldmVudHMgKSB7XG5cdFx0aWYgKCB0eXBlb2YoIGV2ZW50cyApICE9PSBcInN0cmluZ1wiIHx8IGpRdWVyeS5ldmVudC5zcGVjaWFsLmhvdmVyICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50cztcblx0XHR9XG5cdFx0aWYgKCByaG92ZXJIYWNrLnRlc3QoIGV2ZW50cyApICkge1xuXHRcdFx0bWlncmF0ZVdhcm4oXCInaG92ZXInIHBzZXVkby1ldmVudCBpcyBkZXByZWNhdGVkLCB1c2UgJ21vdXNlZW50ZXIgbW91c2VsZWF2ZSdcIik7XG5cdFx0fVxuXHRcdHJldHVybiBldmVudHMgJiYgZXZlbnRzLnJlcGxhY2UoIHJob3ZlckhhY2ssIFwibW91c2VlbnRlciQxIG1vdXNlbGVhdmUkMVwiICk7XG5cdH07XG5cbi8vIEV2ZW50IHByb3BzIHJlbW92ZWQgaW4gMS45LCBwdXQgdGhlbSBiYWNrIGlmIG5lZWRlZDsgbm8gcHJhY3RpY2FsIHdheSB0byB3YXJuIHRoZW1cbmlmICggalF1ZXJ5LmV2ZW50LnByb3BzICYmIGpRdWVyeS5ldmVudC5wcm9wc1sgMCBdICE9PSBcImF0dHJDaGFuZ2VcIiApIHtcblx0alF1ZXJ5LmV2ZW50LnByb3BzLnVuc2hpZnQoIFwiYXR0ckNoYW5nZVwiLCBcImF0dHJOYW1lXCIsIFwicmVsYXRlZE5vZGVcIiwgXCJzcmNFbGVtZW50XCIgKTtcbn1cblxuLy8gVW5kb2N1bWVudGVkIGpRdWVyeS5ldmVudC5oYW5kbGUgd2FzIFwiZGVwcmVjYXRlZFwiIGluIGpRdWVyeSAxLjdcbmlmICggalF1ZXJ5LmV2ZW50LmRpc3BhdGNoICkge1xuXHRtaWdyYXRlV2FyblByb3AoIGpRdWVyeS5ldmVudCwgXCJoYW5kbGVcIiwgalF1ZXJ5LmV2ZW50LmRpc3BhdGNoLCBcImpRdWVyeS5ldmVudC5oYW5kbGUgaXMgdW5kb2N1bWVudGVkIGFuZCBkZXByZWNhdGVkXCIgKTtcbn1cblxuLy8gU3VwcG9ydCBmb3IgJ2hvdmVyJyBwc2V1ZG8tZXZlbnQgYW5kIGFqYXggZXZlbnQgd2FybmluZ3NcbmpRdWVyeS5ldmVudC5hZGQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICl7XG5cdGlmICggZWxlbSAhPT0gZG9jdW1lbnQgJiYgcmFqYXhFdmVudC50ZXN0KCB0eXBlcyApICkge1xuXHRcdG1pZ3JhdGVXYXJuKCBcIkFKQVggZXZlbnRzIHNob3VsZCBiZSBhdHRhY2hlZCB0byBkb2N1bWVudDogXCIgKyB0eXBlcyApO1xuXHR9XG5cdGV2ZW50QWRkLmNhbGwoIHRoaXMsIGVsZW0sIGhvdmVySGFjayggdHlwZXMgfHwgXCJcIiApLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApO1xufTtcbmpRdWVyeS5ldmVudC5yZW1vdmUgPSBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIHNlbGVjdG9yLCBtYXBwZWRUeXBlcyApe1xuXHRldmVudFJlbW92ZS5jYWxsKCB0aGlzLCBlbGVtLCBob3ZlckhhY2soIHR5cGVzICkgfHwgXCJcIiwgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICk7XG59O1xuXG5qUXVlcnkuZm4uZXJyb3IgPSBmdW5jdGlvbigpIHtcblx0dmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbCggYXJndW1lbnRzLCAwKTtcblx0bWlncmF0ZVdhcm4oXCJqUXVlcnkuZm4uZXJyb3IoKSBpcyBkZXByZWNhdGVkXCIpO1xuXHRhcmdzLnNwbGljZSggMCwgMCwgXCJlcnJvclwiICk7XG5cdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRyZXR1cm4gdGhpcy5iaW5kLmFwcGx5KCB0aGlzLCBhcmdzICk7XG5cdH1cblx0Ly8gZXJyb3IgZXZlbnQgc2hvdWxkIG5vdCBidWJibGUgdG8gd2luZG93LCBhbHRob3VnaCBpdCBkb2VzIHByZS0xLjdcblx0dGhpcy50cmlnZ2VySGFuZGxlci5hcHBseSggdGhpcywgYXJncyApO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5mbi50b2dnbGUgPSBmdW5jdGlvbiggZm4sIGZuMiApIHtcblxuXHQvLyBEb24ndCBtZXNzIHdpdGggYW5pbWF0aW9uIG9yIGNzcyB0b2dnbGVzXG5cdGlmICggIWpRdWVyeS5pc0Z1bmN0aW9uKCBmbiApIHx8ICFqUXVlcnkuaXNGdW5jdGlvbiggZm4yICkgKSB7XG5cdFx0cmV0dXJuIG9sZFRvZ2dsZS5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdH1cblx0bWlncmF0ZVdhcm4oXCJqUXVlcnkuZm4udG9nZ2xlKGhhbmRsZXIsIGhhbmRsZXIuLi4pIGlzIGRlcHJlY2F0ZWRcIik7XG5cblx0Ly8gU2F2ZSByZWZlcmVuY2UgdG8gYXJndW1lbnRzIGZvciBhY2Nlc3MgaW4gY2xvc3VyZVxuXHR2YXIgYXJncyA9IGFyZ3VtZW50cyxcblx0XHRndWlkID0gZm4uZ3VpZCB8fCBqUXVlcnkuZ3VpZCsrLFxuXHRcdGkgPSAwLFxuXHRcdHRvZ2dsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHQvLyBGaWd1cmUgb3V0IHdoaWNoIGZ1bmN0aW9uIHRvIGV4ZWN1dGVcblx0XHRcdHZhciBsYXN0VG9nZ2xlID0gKCBqUXVlcnkuX2RhdGEoIHRoaXMsIFwibGFzdFRvZ2dsZVwiICsgZm4uZ3VpZCApIHx8IDAgKSAlIGk7XG5cdFx0XHRqUXVlcnkuX2RhdGEoIHRoaXMsIFwibGFzdFRvZ2dsZVwiICsgZm4uZ3VpZCwgbGFzdFRvZ2dsZSArIDEgKTtcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgY2xpY2tzIHN0b3Bcblx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cblx0XHRcdC8vIGFuZCBleGVjdXRlIHRoZSBmdW5jdGlvblxuXHRcdFx0cmV0dXJuIGFyZ3NbIGxhc3RUb2dnbGUgXS5hcHBseSggdGhpcywgYXJndW1lbnRzICkgfHwgZmFsc2U7XG5cdFx0fTtcblxuXHQvLyBsaW5rIGFsbCB0aGUgZnVuY3Rpb25zLCBzbyBhbnkgb2YgdGhlbSBjYW4gdW5iaW5kIHRoaXMgY2xpY2sgaGFuZGxlclxuXHR0b2dnbGVyLmd1aWQgPSBndWlkO1xuXHR3aGlsZSAoIGkgPCBhcmdzLmxlbmd0aCApIHtcblx0XHRhcmdzWyBpKysgXS5ndWlkID0gZ3VpZDtcblx0fVxuXG5cdHJldHVybiB0aGlzLmNsaWNrKCB0b2dnbGVyICk7XG59O1xuXG5qUXVlcnkuZm4ubGl2ZSA9IGZ1bmN0aW9uKCB0eXBlcywgZGF0YSwgZm4gKSB7XG5cdG1pZ3JhdGVXYXJuKFwialF1ZXJ5LmZuLmxpdmUoKSBpcyBkZXByZWNhdGVkXCIpO1xuXHRpZiAoIG9sZExpdmUgKSB7XG5cdFx0cmV0dXJuIG9sZExpdmUuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHR9XG5cdGpRdWVyeSggdGhpcy5jb250ZXh0ICkub24oIHR5cGVzLCB0aGlzLnNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5mbi5kaWUgPSBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRtaWdyYXRlV2FybihcImpRdWVyeS5mbi5kaWUoKSBpcyBkZXByZWNhdGVkXCIpO1xuXHRpZiAoIG9sZERpZSApIHtcblx0XHRyZXR1cm4gb2xkRGllLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0fVxuXHRqUXVlcnkoIHRoaXMuY29udGV4dCApLm9mZiggdHlwZXMsIHRoaXMuc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbi8vIFR1cm4gZ2xvYmFsIGV2ZW50cyBpbnRvIGRvY3VtZW50LXRyaWdnZXJlZCBldmVudHNcbmpRdWVyeS5ldmVudC50cmlnZ2VyID0gZnVuY3Rpb24oIGV2ZW50LCBkYXRhLCBlbGVtLCBvbmx5SGFuZGxlcnMgICl7XG5cdGlmICggIWVsZW0gJiYgIXJhamF4RXZlbnQudGVzdCggZXZlbnQgKSApIHtcblx0XHRtaWdyYXRlV2FybiggXCJHbG9iYWwgZXZlbnRzIGFyZSB1bmRvY3VtZW50ZWQgYW5kIGRlcHJlY2F0ZWRcIiApO1xuXHR9XG5cdHJldHVybiBldmVudFRyaWdnZXIuY2FsbCggdGhpcywgIGV2ZW50LCBkYXRhLCBlbGVtIHx8IGRvY3VtZW50LCBvbmx5SGFuZGxlcnMgICk7XG59O1xualF1ZXJ5LmVhY2goIGFqYXhFdmVudHMuc3BsaXQoXCJ8XCIpLFxuXHRmdW5jdGlvbiggXywgbmFtZSApIHtcblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgbmFtZSBdID0ge1xuXHRcdFx0c2V0dXA6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IHRoaXM7XG5cblx0XHRcdFx0Ly8gVGhlIGRvY3VtZW50IG5lZWRzIG5vIHNoaW1taW5nOyBtdXN0IGJlICE9PSBmb3Igb2xkSUVcblx0XHRcdFx0aWYgKCBlbGVtICE9PSBkb2N1bWVudCApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQuYWRkKCBkb2N1bWVudCwgbmFtZSArIFwiLlwiICsgalF1ZXJ5Lmd1aWQsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIG5hbWUsIG51bGwsIGVsZW0sIHRydWUgKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRqUXVlcnkuX2RhdGEoIHRoaXMsIG5hbWUsIGpRdWVyeS5ndWlkKysgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGRvY3VtZW50LCBuYW1lICsgXCIuXCIgKyBqUXVlcnkuX2RhdGEoIHRoaXMsIG5hbWUgKSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9O1xuXHR9XG4pO1xuXG5cbn0pKCBqUXVlcnksIHdpbmRvdyApO1xuIl19
